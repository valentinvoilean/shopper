/*============================================================================
  Shopify Shopper
  Copyright 2016 Valentin-Marian Voilean.
  Author Valentin-Marian Voilean
  Built with Sass - http://sass-lang.com/
==============================================================================*/

/*============================================================================
  Table of Contents

  #Breakpoints
  #General Variables
  #Sass Mixins
  #Normalize
  #Grid Setup
  #Basic Styles
  #Helper Classes
  #Typography
  #Rich Text Editor
  #Links and Buttons
  #Lists
  #Tables
  #Reponsive Tables
  #OOCSS Media Object
  #Images and Iframes
  #Forms
  #Icons
  #Pagination
  #Site Header
  #Site Nav and Dropdowns
  #Mobile Nav
  #Drawers
  #Site Footer
  #Product and Collection Grids
  #Collection Filters
  #Breadcrumbs
  #Product Page
  #Notes and Form Feedback
  #Cart Page
  #Ajax Cart Styles
==============================================================================*/

/*============================================================================
  #Breakpoints
==============================================================================*/

//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Large screen / wide desktop
$screen-lg-min:              1200px;
$screen-lg:                  $screen-lg-min;

// Medium screen / desktop
$screen-md-min:              1024px;
$screen-md-max:              $screen-lg-min - 1;
$screen-md:                  $screen-md-min $screen-md-max;

// Small screen / tablet
$screen-sm-min:              768px;
$screen-sm-max:              $screen-md-min - 1;
$screen-sm:                  $screen-sm-min $screen-sm-max;

// Extra small screen / phone
$screen-xs-min:              0;
$screen-xs-max:              $screen-sm-min - 1;
$screen-xs:                  $screen-xs-min $screen-xs-max;

//== Grid system
//
//## Define your custom responsive grid.

//** Number of columns in the grid.
$grid-columns:              12;
//** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width:         20px;
// Navbar collapse
//** Point at which the navbar becomes uncollapsed.
$grid-float-breakpoint:     $screen-sm-min;
//** Point at which the navbar begins collapsing.
$grid-float-breakpoint-max: ($grid-float-breakpoint - 1);


//== Container sizes
//
//## Define the maximum width of `.container` for different screen sizes.

// Small screen / tablet
$container-tablet:             100%;
//** For `$screen-sm-min` and up.
$container-sm:                 $container-tablet;

// Medium screen / desktop
$container-desktop:            100%;
//** For `$screen-md-min` and up.
$container-md:                 $container-desktop;

// Large screen / wide desktop
$container-large-desktop:      1200px;
//** For `$screen-lg-min` and up.
$container-lg:                 $container-large-desktop;

/*============================================================================
  #General Variables
==============================================================================*/

// Page Colors
$page-background-color: #{'{{ settings.page_background_color }}'};
$page-text-color: #{'{{ settings.page_text_color }}'};
$page-link-color: #{'{{ settings.page_link_color }}'};
$border-color: #{'{{ settings.page_border_color }}'};

// Other Colors

// Header Top colors
$header-top-background-color: #fff;

$header-icon-color: #D7D7D7;
$header-icon-color--active: #444;

$header-link-color: #D7D7D7;
$header-link-color--active: #444;

$header-top-dropdown-option: #D7D7D7;
$header-top-dropdown-option--active: #444;

$header-top-separator-color: #E5E5E5;

// Header Middle colors
$header-main-cart-color: #9A9A9A;

// Header Bottom colors
$header-bottom-top-info-color: #FFF;
$header-bottom-top-info-background: #343434;

/*============================================================================
  #Sass Mixins
==============================================================================*/

/*================  Clearfix mixin ================*/

.clearfix {
  &:after {
    content: '';
    display: table;
    clear: both; }
  *zoom: 1;
}

@mixin clearfix() {
  &:after {
    content: '';
    display: table;
    clear: both; }
  *zoom: 1;
}

// Center-align a block level element

@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}

// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor(($gutter / 2));
  padding-right: ceil(($gutter / 2));
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}

/*================  Breakpoint mixin ================*/

@mixin breakpoint($class) {
  $minWidth: null;
  $maxWidth: null;

  @if length($class) == 2 {
    $minWidth: nth($class, 1);
    $maxWidth: nth($class, 2);
  }
  @else {
    $minWidth: $class;
  }

  @if $minWidth != null and $maxWidth != null{
    @media screen and (min-width: #{$minWidth}) and (max-width: #{$maxWidth}) { @content; }
  }
  @else if $minWidth != null {
    @media screen and (min-width: #{$minWidth}) { @content; }
  }
  @else {
    @warn "Please specify a breakpoint";
  }
}

// Responsive utilities

//
// More easily include all the states for responsive-utilities.less.
// [converter] $parent hack
@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }
  table#{$parent}  { display: table !important; }
  tr#{$parent}     { display: table-row !important; }
  th#{$parent},
  td#{$parent}     { display: table-cell !important; }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}


/*============================================================================
  #Normalize
==============================================================================*/

/*! normalize.css v4.2.0 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,optgroup,select,textarea{font:inherit;margin:0}optgroup{font-weight:bold}button,input{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}


/*============================================================================
  #Grid setup
==============================================================================*/
//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include container-fixed;

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include container-fixed;
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  @include make-row;
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}

//
// Utility classes
// --------------------------------------------------


// Floats
// -------------------------

.center-block {
  @include center-block;
}
.pull-right {
  float: right !important;
}
.pull-left {
  float: left !important;
}


// Toggling content
// -------------------------

.show {
  display: block !important;
}
.is-invisible {
  visibility: hidden !important;
}

.is-visible {
  visibility: visible !important;
}

.is-outside-viewport {
  position: fixed;
  top: -9999px;
  left: -9999px;
}

.is-collapsed {
  width: 0 !important;
  border: 0 !important;
  padding: 0 !important;
}

.hidden {
  display: none !important;
}
//
// Responsive: Utility classes
// --------------------------------------------------

@at-root {
  @-ms-viewport {
    width: device-width;
  }
}


// Visibility utilities
// Note: Deprecated .visible-xs, .visible-sm, .visible-md, and .visible-lg as of v3.2.0

@include responsive-invisibility('.visible-xs');
@include responsive-invisibility('.visible-sm');
@include responsive-invisibility('.visible-md');
@include responsive-invisibility('.visible-lg');

.visible-xs-block,
.visible-xs-inline,
.visible-xs-inline-block,
.visible-sm-block,
.visible-sm-inline,
.visible-sm-inline-block,
.visible-md-block,
.visible-md-inline,
.visible-md-inline-block,
.visible-lg-block,
.visible-lg-inline,
.visible-lg-inline-block {
  display: none !important;
}

@include breakpoint($screen-xs) {
  @include responsive-visibility('.visible-xs');
}
.visible-xs-block {
  @include breakpoint($screen-xs) {
    display: block !important;
  }
}
.visible-xs-inline {
  @include breakpoint($screen-xs) {
    display: inline !important;
  }
}
.visible-xs-inline-block {
  @include breakpoint($screen-xs) {
    display: inline-block !important;
  }
}

@include breakpoint($screen-sm) {
  @include responsive-visibility('.visible-sm');
}
.visible-sm-block {
  @include breakpoint($screen-sm) {
    display: block !important;
  }
}
.visible-sm-inline {
  @include breakpoint($screen-sm) {
    display: inline !important;
  }
}
.visible-sm-inline-block {
  @include breakpoint($screen-sm) {
    display: inline-block !important;
  }
}

@include breakpoint($screen-md) {
  @include responsive-visibility('.visible-md');
}
.visible-md-block {
  @include breakpoint($screen-md) {
    display: block !important;
  }
}
.visible-md-inline {
  @include breakpoint($screen-md) {
    display: inline !important;
  }
}
.visible-md-inline-block {
  @include breakpoint($screen-md) {
    display: inline-block !important;
  }
}

@include breakpoint($screen-lg) {
  @include responsive-visibility('.visible-lg');
}
.visible-lg-block {
  @include breakpoint($screen-lg) {
    display: block !important;
  }
}
.visible-lg-inline {
  @include breakpoint($screen-lg) {
    display: inline !important;
  }
}
.visible-lg-inline-block {
  @include breakpoint($screen-lg) {
    display: inline-block !important;
  }
}

@include breakpoint($screen-xs) {
  @include responsive-invisibility('.hidden-xs');
}

@include breakpoint($screen-sm) {
  @include responsive-invisibility('.hidden-sm');
}

@include breakpoint($screen-md) {
  @include responsive-invisibility('.hidden-md');
}

@include breakpoint($screen-lg) {
  @include responsive-invisibility('.hidden-lg');
}


// Import all components
* {
  box-sizing: border-box;
  outline: none;
}

body {
  background: $page-background-color;
  color: $page-text-color;
}

a {
  color: $page-link-color;
  text-decoration: none;
}

ul { margin:0; padding: 0;}

.main {
  height: 100vh;

  & > * {
    height: 100%;
  }
}

/*.test {
  height: 100%;
}

.testBackground {
  background: rgba(0, 120, 162, 0.23);
  width: 100%;
  height: 100%;

  @include breakpoint($screen-md) {
    background: black;
  }
}*/

$headerTopTablet-height:      40px;
$headerTopDesktop-height:     30px;
$headerTop-separatorHeight:   14px;
$headerTopTabletIcon-height:  26px;
$headerTopDesktopIcon-height: 20px;

.headerTop {
  background: $header-top-background-color;
  font-family: 'Open Sans', sans-serif;
  font-size: 12px;
  line-height: $headerTopTablet-height;
  font-weight: 400;

  height: $headerTopTablet-height;
  border-bottom: 1px solid $border-color;
  overflow: hidden;

  @include breakpoint($screen-lg) {
    line-height: $headerTopDesktop-height;
    height: $headerTopDesktop-height;
  }
}

.headerTop > .container > ul {
  overflow: hidden;
  height: 100%;

  & > li {
    list-style: none;
    float: left;
    cursor: pointer;
  }

  .myAccount {
  text-transform: uppercase;

  .myAccount__link {
    float: left;
    color: $header-link-color;
    padding-right: 10px;
    transition: color .3s ease-in-out;
    cursor: pointer;

    &.is-active {
      color: $header-link-color--active;
    }
  }

  &:hover,
  &.is-active {
    .myAccount__icon {
      fill: $header-icon-color--active;
    }
  }
}

// Left Side - hidden links
.myAccount__leftSide {
  white-space: nowrap;
  float: left;
  overflow: hidden;

  &.is-animated {
    transition: all .3s ease-in-out;
  }

  .myAccount__separator,
  .myAccount__link {
    float: none;
    display: inline-block;
    vertical-align: top;
  }

  .myAccount__separator {
    margin-left: -5px;
    margin-right: 5px;
    color: $header-top-separator-color;
  }
}

// Right Side - welcome message + icon
.myAccount__rightSide {
  float: left;
  overflow: hidden;
  cursor: pointer;

  .myAccount__link {
    float: right;
    white-space: nowrap;
    overflow: hidden;
    text-transform: capitalize;

    &.is-animated {
      transition: all .3s ease-in-out;
    }
  }

  .myAccount__img {
    position: relative;
    height: $headerTopTabletIcon-height;
    width: $headerTopTabletIcon-height + 2;
    margin-top: ($headerTopTablet-height - $headerTopTabletIcon-height) / 2;
    float: right;

    @include breakpoint($screen-lg) {
      height: $headerTopDesktopIcon-height;
      width: $headerTopDesktopIcon-height + 2;
      margin-top: ($headerTopDesktop-height - $headerTopDesktopIcon-height) / 2;
    }
  }

  .myAccount__icon {
    transition: fill 0.3s ease-in-out;
    height: 100%;
    width: 100%;
    fill: $header-icon-color;
    overflow: visible;
  }

  .myAccount__gravatar {
    position: absolute;
    top: 0;
    right: 1px;
    height: 100%;

    img {
      max-width: 100%;
      max-height: 100%;
      border-radius: 100px;
    }

    & + .myAccount__icon {
      border-radius: 100px;
      overflow: hidden;
    }
  }
}
  .wishList {
  text-transform: uppercase;
  cursor: pointer;

  .wishList__link {
    color: $header-link-color;
    padding-right: 10px;
    cursor: pointer;
    float: left;
    white-space: nowrap;
    overflow: hidden;
    text-transform: capitalize;

    &.is-active {
      color: $header-link-color--active;
    }

    &.is-animated {
      transition: all .3s ease-in-out;
    }
  }

  .wishList__icon {
    transition: fill 0.3s ease-in-out;
    height: $headerTopTabletIcon-height;
    width: $headerTopTabletIcon-height + 2;
    fill: $header-icon-color;
    overflow: visible;

    &:last-child {
      display: none;
    }

    @include breakpoint($screen-lg) {
      height: $headerTopDesktopIcon-height;
      width: $headerTopDesktopIcon-height + 2;
    }
  }

  .wishList__counter {
    font-size: 10px;
    line-height: 10px;
    float: right;
    color: $header-link-color;
    margin-left: 2px;
    display: none;
  }

  .wishList__img {
    position: relative;
    margin-top: ($headerTopTablet-height - $headerTopTabletIcon-height) / 2;
    float: right;

    @include breakpoint($screen-lg) {
      margin-top: ($headerTopDesktop-height - $headerTopDesktopIcon-height) / 2;
    }
  }

  .wishList__img.is-active {
    .wishList__icon {
      display: none;

      &:last-child {
        display: block;
      }
    }

    .wishList__counter {
      display: block;
    }
  }

  &:hover,
  &.is-active {
    .wishList__icon {
      fill: $header-icon-color--active;
    }

    .wishList__counter {
      color: $header-link-color--active;
    }
  }
}
}

.headerTop__separator {
  height: $headerTop-separatorHeight;
  width: 1px;
  background: $header-top-separator-color;
  margin-top: ($headerTopTablet-height - $headerTop-separatorHeight) / 2;
  margin-left: 10px;
  margin-right: 10px;
  cursor: default;

  @include breakpoint($screen-lg) {
    margin-top: ($headerTopDesktop-height - $headerTop-separatorHeight) / 2;
  }

  &:last-child { display: none; }
}

.headerTopRight {
  float: right;
}

.headerTopLeft {
  float: left;

  .headerTopLeft__item {
    margin-right: 20px;

    &:hover {
      .headerTopLeft__img {
        transform: rotate(0deg);
        fill: $header-icon-color--active;
      }

      .headerTopLeft__option {
        max-width: 200px;
        margin-right: 10px;
      }
    }
  }

  .headerTopLeft__img {
    height: 8px;
    width: 8px;
    margin-top: 16px;
    margin-right: 5px;
    fill: $header-icon-color;
    float: left;
    transform: rotate(90deg);
    cursor: pointer;
    transition: transform .3s ease-in-out, fill .3s linear;

    @include breakpoint($screen-lg) {
      margin-top: 10px;
    }
  }

  .headerTopLeft__options {
    list-style: none;
    float: left;
    text-transform: uppercase;
  }

  .headerTopLeft__option {
    float: left;
    max-width: 0;
    overflow: hidden;
    transition: all .3s linear;
    color: $header-top-dropdown-option;

    &:hover,
    &.active {
      max-width: 200px;
      color: $header-top-dropdown-option--active;
    }
  }
}

.headerMain {
  padding-top: 10px;
  padding-bottom: 10px;
  display: flex;
  align-items: center;
  justify-content: space-between;

  @include breakpoint($screen-md) {
    padding-top: 15px;
    padding-bottom: 15px;
  }

  @include breakpoint($screen-lg) {
    padding-top: 20px;
    padding-bottom: 20px;
  }

  .menuIcon {
    margin-right: auto;
  }

  .logo {
    display: block;
    margin-left: 20px;
    margin-right: 20px;

    @include breakpoint($screen-sm-min) {
      margin-left: 0;
      margin-right: 0;
    }
  }

  .logo__img {
    max-height:30px;
    display: block;

    @include breakpoint($screen-sm-min) {
      max-height:40px;
    }

    @include breakpoint($screen-lg) {
      max-height:50px;
    }
  }

  .cart {
    width: 25px;
    height: 25px;
    fill: $header-main-cart-color;
    margin-left: auto;

    @include breakpoint($screen-sm-min) {
      width: 30px;
      height: 30px;
    }
  }
}

.headerBottom {
  overflow: hidden;

  .topInfo {
    height: 25px;
    width: 100%;
    float: left;
    color: $header-bottom-top-info-color;
    background: $header-bottom-top-info-background;
  }

  .breadcrumb {
    height: 25px;
    width: 100%;
    float: left;
  }
}


/* -----------------------------------------------------------------------------
  HAMBURGER ICONS COMPONENT

  Licensed under the MIT license, http://www.opensource.org/licenses/mit-license.php
  Copyright 2014, Call Me Nick - https://github.com/callmenick/Animating-Hamburger-Icons
----------------------------------------------------------------------------- */

// vars

$button-width: 18px;                    // The width of the button area
$button-height: 14px;                   // The height of the button area
$bar-thickness: 2px;                    // The thickness of the button bars
$button-pad: 0;                      // The left/right padding between button area and bars.
$button-bar-space: 4px;                // The spacing between button bars
$button-transistion-duration: 0.3s;     // The transition duration

/**
 * Toggle Switch Globals
 *
 * All switches should take on the class `menuIcon` as well as their
 * variant that will give them unique properties. This class is an overview
 * class that acts as a reset for all versions of the icon.
 */

.menuIcon {
  display: block;
  position: relative;
  overflow: hidden;
  margin: 0;
  padding: 0;
  width: $button-width;
  height: $button-height;
  font-size: 0;
  text-indent: -9999px;
  appearance: none;
  box-shadow: none;
  border-radius: none;
  border: none;
  cursor: pointer;
  transition: background $button-transistion-duration;
}

.menuIcon:focus {
  outline: none;
}

.menuIcon span {
  display: block;
  position: absolute;
  top: ($button-height / 2) - ($bar-thickness / 2);
  left: $button-pad;
  right: $button-pad;
  height: $bar-thickness;
  background-color: #000;
  width: $button-width - 4;
}

.menuIcon span::before,
.menuIcon span::after {
  position: absolute;
  display: block;
  left: 0;
  width: $button-width;
  height: $bar-thickness;
  background-color: #000;
  content: "";
}

.menuIcon span::before {
  top: -$bar-thickness - $button-bar-space;
}

.menuIcon span::after {
  bottom: -$bar-thickness - $button-bar-space;
}

/**
 * Style 1
 *
 * Hamburger to "x" (htx). Takes on a hamburger shape, bars slide
 * down to center and transform into an "x".
 */

.menuIcon--x span {
  transition: background 0s $button-transistion-duration;
}

.menuIcon--x span::before,
.menuIcon--x span::after {
  transition-duration: $button-transistion-duration, $button-transistion-duration;
  transition-delay: $button-transistion-duration, 0s;
}

.menuIcon--x span::before {
  transition-property: top, transform;
}

.menuIcon--x span::after {
  transition-property: bottom, transform;
}

/* active state, i.e. menu open */

.menuIcon--x.is-active span {
  background: none;
}

.menuIcon--x.is-active span::before {
  top: 0;
  transform: rotate(45deg);
}

.menuIcon--x.is-active span::after {
  bottom: 0;
  transform: rotate(-45deg);
}

.menuIcon--x.is-active span::before,
.menuIcon--x.is-active span::after {
  transition-delay: 0s, $button-transistion-duration;
}

/**
 * Style 2
 *
 * Hamburger to left-arrow (htla). Hamburger menu transforms to a left-pointing
 * arrow. Usually indicates an off canvas menu sliding in from left that
 * will be close on re-click of the icon.
 */


.menuIcon--arrow span {
  transition: transform $button-transistion-duration;
}

.menuIcon--arrow span::before {
  transform-origin: top right;
  transition: transform $button-transistion-duration, width $button-transistion-duration, top $button-transistion-duration;
}

.menuIcon--arrow span::after {
  transform-origin: bottom right;
  transition: transform $button-transistion-duration, width $button-transistion-duration, bottom $button-transistion-duration;
}

/* active state, i.e. menu open */

.menuIcon--arrow.is-active span {
  transform: rotate(180deg);
  width: $button-width;
}

.menuIcon--arrow.is-active span::before,
.menuIcon--arrow.is-active span::after {
  width: $button-width / 2;
}

.menuIcon--arrow.is-active span::before {
  top: 0;
  transform: translateX($button-width/2) translateY($bar-thickness/2) rotate(45deg);
}

.menuIcon--arrow.is-active span::after {
  bottom: 0;
  transform: translateX($button-width/2) translateY(-$bar-thickness/2) rotate(-45deg);
}

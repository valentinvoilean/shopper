
/*============================================================================
  #Breakpoints
==============================================================================*/

//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Large screen / wide desktop
$screen-lg-min:              1200px;
$screen-lg:                  $screen-lg-min;

// Medium screen / desktop
$screen-md-min:              1024px;
$screen-md-max:              $screen-lg-min - 1;
$screen-md:                  $screen-md-min $screen-md-max;

// Small screen / tablet
$screen-sm-min:              768px;
$screen-sm-max:              $screen-md-min - 1;
$screen-sm:                  $screen-sm-min $screen-sm-max;

// Extra small screen / phone
$screen-xs-min:              0;
$screen-xs-max:              $screen-sm-min - 1;
$screen-xs:                  $screen-xs-min $screen-xs-max;

//== Grid system
//
//## Define your custom responsive grid.

//** Number of columns in the grid.
$grid-columns:              12;
//** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width:         20px;
// Navbar collapse
//** Point at which the navbar becomes uncollapsed.
$grid-float-breakpoint:     $screen-sm-min;
//** Point at which the navbar begins collapsing.
$grid-float-breakpoint-max: ($grid-float-breakpoint - 1);


//== Container sizes
//
//## Define the maximum width of `.container` for different screen sizes.

// Small screen / tablet
$container-tablet:             100%;
//** For `$screen-sm-min` and up.
$container-sm:                 $container-tablet;

// Medium screen / desktop
$container-desktop:            100%;
//** For `$screen-md-min` and up.
$container-md:                 $container-desktop;

// Large screen / wide desktop
$container-large-desktop:      1200px;
//** For `$screen-lg-min` and up.
$container-lg:                 $container-large-desktop;

/*============================================================================
  #General Variables
==============================================================================*/

$base-font-family:       {{ settings.base_font_family }};
$h1-font-family:         {{ settings.h1_font_family }};
$h2-font-family:         {{ settings.h2_font_family }};
$h3-font-family:         {{ settings.h3_font_family }};
$h4-font-family:         {{ settings.h4_font_family }};
$h5-font-family:         {{ settings.h5_font_family }};
$h6-font-family:         {{ settings.h6_font_family }};

$mobile-base-font-size:  {{ settings.mobile_base_font_size }};
$tablet-base-font-size:  {{ settings.tablet_base_font_size }};
$desktop-base-font-size: {{ settings.desktop_base_font_size }};

$mobile-h1-font-size:    {{ settings.mobile_h1_font_size }};
$tablet-h1-font-size:    {{ settings.tablet_h1_font_size }};
$desktop-h1-font-size:   {{ settings.desktop_h1_font_size }};

$mobile-h2-font-size:    {{ settings.mobile_h2_font_size }};
$tablet-h2-font-size:    {{ settings.tablet_h2_font_size }};
$desktop-h2-font-size:   {{ settings.desktop_h2_font_size }};

$mobile-h3-font-size:    {{ settings.mobile_h3_font_size }};
$tablet-h3-font-size:    {{ settings.tablet_h3_font_size }};
$desktop-h3-font-size:   {{ settings.desktop_h3_font_size }};

$mobile-h4-font-size:    {{ settings.mobile_h4_font_size }};
$tablet-h4-font-size:    {{ settings.tablet_h4_font_size }};
$desktop-h4-font-size:   {{ settings.desktop_h4_font_size }};

$mobile-h5-font-size:    {{ settings.mobile_h5_font_size }};
$tablet-h5-font-size:    {{ settings.tablet_h5_font_size }};
$desktop-h5-font-size:   {{ settings.desktop_h5_font_size }};

$mobile-h6-font-size:    {{ settings.mobile_h6_font_size }};
$tablet-h6-font-size:    {{ settings.tablet_h6_font_size }};
$desktop-h6-font-size:   {{ settings.desktop_h6_font_size }};// Page Colors
$mobile-page-background-color: #{'{{ settings.mobile_page_background_color }}'};
$tablet-page-background-color: #{'{{ settings.tablet_page_background_color }}'};
$desktop-page-background-color: #{'{{ settings.desktop_page_background_color }}'};

$mobile-page-text-color: #{'{{ settings.mobile_page_text_color }}'};
$tablet-page-text-color: #{'{{ settings.tablet_page_text_color }}'};
$desktop-page-text-color: #{'{{ settings.desktop_page_text_color }}'};

$mobile-page-link-color: #{'{{ settings.mobile_page_link_color }}'};
$tablet-page-link-color: #{'{{ settings.tablet_page_link_color }}'};
$desktop-page-link-color: #{'{{ settings.desktop_page_link_color }}'};

$mobile-border-color: #{'{{ settings.mobile_page_border_color }}'};
$tablet-border-color: #{'{{ settings.tablet_page_border_color }}'};
$desktop-border-color: #{'{{ settings.desktop_page_border_color }}'};/*================  Clearfix mixin ================*/

.clearfix {
  &:after {
    content: '';
    display: table;
    clear: both; }
  *zoom: 1;
}

.noClear {
  &:after {
    content: initial !important;
    display: none !important;
    clear: none !important;
  }
}

@mixin clearfix() {
  &:after {
    content: '';
    display: table;
    clear: both; }
  *zoom: 1;
}
// Flexbox Mixins
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox
//
// Copyright (c) 2013 Brian Franco
//
//----------------------------------------------------------------------

// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

%inline-flex { @include inline-flex; }

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}
// Shorter version:
@mixin flex-dir($args...) { @include flex-direction($args...); }

//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {

  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}
// Shorter version:
@mixin flex-just($args...) { @include justify-content($args...); }

//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

//----------------------------------

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}// Center-align a block level element

@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}
// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor(($gutter / 2));
  padding-right: ceil(($gutter / 2));
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}
/*================  Breakpoint mixin ================*/

@mixin breakpoint($class) {
  $minWidth: null;
  $maxWidth: null;

  @if length($class) == 2 {
    $minWidth: nth($class, 1);
    $maxWidth: nth($class, 2);
  }
  @else {
    $minWidth: $class;
  }

  @if $minWidth != null and $maxWidth != null{
    @media screen and (min-width: #{$minWidth}) and (max-width: #{$maxWidth}) { @content; }
  }
  @else if $minWidth != null {
    @media screen and (min-width: #{$minWidth}) { @content; }
  }
  @else {
    @warn "Please specify a breakpoint";
  }
}
/*! normalize.css v4.2.0 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,optgroup,select,textarea{font:inherit;margin:0}optgroup{font-weight:bold}button,input{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}
//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include container-fixed;

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include container-fixed;
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  @include make-row;
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}
//
// Utility classes
// --------------------------------------------------


// Floats
// -------------------------

.center-block {
  @include center-block;
}
.pull-right {
  float: right !important;
}
.pull-left {
  float: left !important;
}


// Toggling content
// -------------------------

.show {
  display: block !important;
}
.is-invisible {
  visibility: hidden !important;
}

.is-visible {
  visibility: visible !important;
}

.is-outside-viewport {
  position: fixed;
  top: -9999px;
  left: -9999px;
}

.is-collapsed {
  width: 0 !important;
  border: 0 !important;
  padding: 0 !important;
}

.hidden {
  display: none !important;
}//
// Responsive: Utility classes
// --------------------------------------------------
@mixin returnInitialStateClasses($mediaQueries){
  @each $mq in $mediaQueries {
    .visible-#{$mq}-min,
    .visible-#{$mq}-min-inline,
    .visible-#{$mq}-min-inline-block,
    .visible-#{$mq}-min-flex,
    .visible-#{$mq},
    .visible-#{$mq}-inline,
    .visible-#{$mq}-inline-block,
    .visible-#{$mq}-flex,
    .visible-#{$mq}-max,
    .visible-#{$mq}-max-inline,
    .visible-#{$mq}-max-inline-block,
    .visible-#{$mq}-max-flex {
      display: none !important;
    }
  }
}

@mixin returnResponsiveClasses($mq){
  .visible-#{$mq} {display:block !important;}
  .hidden-#{$mq} { display: none !important; }
  .visible-#{$mq}-inline { display: inline !important; }
  .visible-#{$mq}-inline-block { display: inline-block !important; }
  .visible-#{$mq}-flex { display: flex !important; }
}

@include returnInitialStateClasses(('xs','sm','md','lg'));

@include breakpoint($screen-xs)     { @include returnResponsiveClasses('xs'); }
@include breakpoint($screen-sm)     { @include returnResponsiveClasses('sm'); }
@include breakpoint($screen-sm-min) { @include returnResponsiveClasses('sm-min'); }
@include breakpoint($screen-sm-max) { @include returnResponsiveClasses('sm-max'); }
@include breakpoint($screen-md)     { @include returnResponsiveClasses('md'); }
@include breakpoint($screen-md-min) { @include returnResponsiveClasses('md-min'); }
@include breakpoint($screen-md-max) { @include returnResponsiveClasses('md-max'); }
@include breakpoint($screen-lg)     { @include returnResponsiveClasses('lg'); }
* {
  box-sizing: border-box;
  outline: none;
}

body {
  background: $mobile-page-background-color;
  color: $mobile-page-text-color;

  font-family: $base-font-family;
  font-size: $mobile-base-font-size;

  @include breakpoint($screen-md) {
    background: $tablet-page-background-color;
    color: $tablet-page-text-color;
    font-size: $tablet-base-font-size;
  }

  @include breakpoint($screen-lg) {
    background: $desktop-page-background-color;
    color: $desktop-page-text-color;
    font-size: $desktop-base-font-size;
  }
}

h1 {
  font-family: $h1-font-family;
  font-size: $mobile-h1-font-size;

  @include breakpoint($screen-md) {
    font-size: $tablet-h1-font-size;
  }

  @include breakpoint($screen-lg) {
    font-size: $desktop-h1-font-size;
  }
}

h2 {
  font-family: $h2-font-family;
  font-size: $mobile-h2-font-size;

  @include breakpoint($screen-md) {
    font-size: $tablet-h2-font-size;
  }

  @include breakpoint($screen-lg) {
    font-size: $desktop-h2-font-size;
  }
}

h3 {
  font-family: $h3-font-family;
  font-size: $mobile-h3-font-size;

  @include breakpoint($screen-md) {
    font-size: $tablet-h3-font-size;
  }

  @include breakpoint($screen-lg) {
    font-size: $desktop-h3-font-size;
  }
}

h4 {
  font-family: $h4-font-family;
  font-size: $mobile-h4-font-size;

  @include breakpoint($screen-md) {
    font-size: $tablet-h4-font-size;
  }

  @include breakpoint($screen-lg) {
    font-size: $desktop-h4-font-size;
  }
}

h5 {
  font-family: $h5-font-family;
  font-size: $mobile-h5-font-size;

  @include breakpoint($screen-md) {
    font-size: $tablet-h5-font-size;
  }

  @include breakpoint($screen-lg) {
    font-size: $desktop-h5-font-size;
  }
}

h6 {
  font-family: $h6-font-family;
  font-size: $mobile-h6-font-size;

  @include breakpoint($screen-md) {
    font-size: $tablet-h6-font-size;
  }

  @include breakpoint($screen-lg) {
    font-size: $desktop-h6-font-size;
  }
}

a {
  color: $mobile-page-link-color;
  text-decoration: none;

  @include breakpoint($screen-md) {
    color: $tablet-page-link-color;
  }

  @include breakpoint($screen-lg) {
    color: $desktop-page-link-color;
  }
}

ul { margin:0; padding: 0;}

.main {
  height: 100vh;

  & > * {
    height: 100%;
  }
}

/* -----------------------------------------------------------------------------
  HAMBURGER ICONS COMPONENT

  Licensed under the MIT license, http://www.opensource.org/licenses/mit-license.php
  Copyright 2014, Call Me Nick - https://github.com/callmenick/Animating-Hamburger-Icons
----------------------------------------------------------------------------- */

// vars

$button-width: 18px;                    // The width of the button area
$button-height: 14px;                   // The height of the button area
$bar-thickness: 2px;                    // The thickness of the button bars
$button-pad: 0;                      // The left/right padding between button area and bars.
$button-bar-space: 4px;                // The spacing between button bars
$button-transistion-duration: 0.3s;     // The transition duration

/**
 * Toggle Switch Globals
 *
 * All switches should take on the class `menuIcon` as well as their
 * variant that will give them unique properties. This class is an overview
 * class that acts as a reset for all versions of the icon.
 */

.menuIcon {
  display: block;
  position: relative;
  overflow: hidden;
  margin: 0;
  padding: 0;
  width: $button-width;
  height: $button-height;
  font-size: 0;
  text-indent: -9999px;
  appearance: none;
  box-shadow: none;
  border-radius: none;
  border: none;
  cursor: pointer;
  transition: background $button-transistion-duration;
}

.menuIcon:focus {
  outline: none;
}

.menuIcon span {
  display: block;
  position: absolute;
  top: ($button-height / 2) - ($bar-thickness / 2);
  left: $button-pad;
  right: $button-pad;
  height: $bar-thickness;
  background-color: #000;
  width: $button-width - 4;
}

.menuIcon span::before,
.menuIcon span::after {
  position: absolute;
  display: block;
  left: 0;
  width: $button-width;
  height: $bar-thickness;
  background-color: #000;
  content: "";
}

.menuIcon span::before {
  top: -$bar-thickness - $button-bar-space;
}

.menuIcon span::after {
  bottom: -$bar-thickness - $button-bar-space;
}

/**
 * Style 1
 *
 * Hamburger to "x" (htx). Takes on a hamburger shape, bars slide
 * down to center and transform into an "x".
 */

.menuIcon--x span {
  transition: background 0s $button-transistion-duration;
}

.menuIcon--x span::before,
.menuIcon--x span::after {
  transition-duration: $button-transistion-duration, $button-transistion-duration;
  transition-delay: $button-transistion-duration, 0s;
}

.menuIcon--x span::before {
  transition-property: top, transform;
}

.menuIcon--x span::after {
  transition-property: bottom, transform;
}

/* active state, i.e. menu open */

.menuIcon--x.is-active span {
  background: none;
}

.menuIcon--x.is-active span::before {
  top: 0;
  transform: rotate(45deg);
}

.menuIcon--x.is-active span::after {
  bottom: 0;
  transform: rotate(-45deg);
}

.menuIcon--x.is-active span::before,
.menuIcon--x.is-active span::after {
  transition-delay: 0s, $button-transistion-duration;
}

/**
 * Style 2
 *
 * Hamburger to left-arrow (htla). Hamburger menu transforms to a left-pointing
 * arrow. Usually indicates an off canvas menu sliding in from left that
 * will be close on re-click of the icon.
 */


.menuIcon--arrow span {
  transition: transform $button-transistion-duration;
}

.menuIcon--arrow span::before {
  transform-origin: top right;
  transition: transform $button-transistion-duration, width $button-transistion-duration, top $button-transistion-duration;
}

.menuIcon--arrow span::after {
  transform-origin: bottom right;
  transition: transform $button-transistion-duration, width $button-transistion-duration, bottom $button-transistion-duration;
}

/* active state, i.e. menu open */

.menuIcon--arrow.is-active span {
  transform: rotate(180deg);
  width: $button-width;
}

.menuIcon--arrow.is-active span::before,
.menuIcon--arrow.is-active span::after {
  width: $button-width / 2;
}

.menuIcon--arrow.is-active span::before {
  top: 0;
  transform: translateX($button-width/2) translateY($bar-thickness/2) rotate(45deg);
}

.menuIcon--arrow.is-active span::after {
  bottom: 0;
  transform: translateX($button-width/2) translateY(-$bar-thickness/2) rotate(-45deg);
}$headerTopTablet-height:      40px;
$headerTopDesktop-height:     30px;
$headerTop-separatorHeight:   14px;
$headerTopTabletIcon-height:  26px;
$headerTopDesktopIcon-height: 20px;

$headerMainTabletMyAccountIcon-height:  25px;
$headerMainDesktopMyAccountIcon-height: 30px;

$logoWidthMobile:  {{ settings.logo_mobile_width }};
$logoWidthTablet:  {{ settings.logo_tablet_width }};
$logoWidthDesktop: {{ settings.logo_desktop_width }};

$header-top-background-color: #fff;
$header-icon-color: #D7D7D7;
$header-icon-color--active: #444;
$header-link-color: #D7D7D7;
$header-link-color--active: #444;
$header-top-dropdown-option: #D7D7D7;
$header-top-dropdown-option--active: #444;
$header-top-separator-color: #E5E5E5;
$header-main-cart-color: #9A9A9A;
$header-bottom-top-info-color: #FFF;
$header-bottom-top-info-background: #343434;.headerTop {
  background: $header-top-background-color;
  font-size: 12px;
  line-height: $headerTopTablet-height;
  font-weight: 400;

  height: $headerTopTablet-height;
  border-bottom: 1px solid $mobile-border-color;
  overflow: hidden;

  @include breakpoint($screen-md) {
    border-color: $tablet-border-color;
  }

  @include breakpoint($screen-lg) {
    border-color: $desktop-border-color;
    line-height: $headerTopDesktop-height;
    height: $headerTopDesktop-height;
  }
}

.headerTop .match-media {
  @include flexbox;
  @include justify-content(space-between);
  height: inherit;
}

.headerTop__items {
  @include flexbox;
  @include align-items(center);
  overflow: hidden;
  height: inherit;
}

.headerTop__separator {
  height: $headerTop-separatorHeight;
  width: 1px;
  background: $header-top-separator-color;
  margin-left: 10px;
  margin-right: 10px;
  cursor: default;

  &:last-child { display: none; }
}

.currency,
.language {
  margin-right: 20px;

  &:hover {
    .currency__img,
    .language__img {
      transform: rotate(0deg);
      fill: $header-icon-color--active;
    }

    .currency__option,
    .language__option {
      max-width: 200px;
      margin-right: 10px;
    }
  }
}

.currency__img,
.language__img {
  height: 8px;
  width: 8px;
  margin-top: 16px;
  margin-right: 5px;
  fill: $header-icon-color;
  float: left;
  transform: rotate(90deg);
  cursor: pointer;
  transition: transform .3s ease-in-out, fill .3s linear;

  @include breakpoint($screen-lg) {
    margin-top: 10px;
  }
}

.currency__select,
.language__select {
  list-style: none;
  float: left;
  text-transform: uppercase;
}

.currency__option,
.language__option {
  float: left;
  max-width: 0;
  overflow: hidden;
  transition: all .3s linear;
  color: $header-top-dropdown-option;

  &:hover,
  &.active {
    max-width: 200px;
    color: $header-top-dropdown-option--active;
  }
}

.headerMain {
  @include flexbox;
  @include align-items(flex-start);
  @include justify-content(space-between);
  padding-top: 10px;
  padding-bottom: 10px;

  @include breakpoint($screen-md) {
    padding-top: 15px;
    padding-bottom: 15px;
  }

  @include breakpoint($screen-lg) {
    padding-top: 20px;
    padding-bottom: 20px;
  }

  .headerMain__items {
    display: flex;
    justify-content: center;

    &:first-child {
      justify-content: flex-start;
    }

    &:last-child {
      justify-content: flex-end;
    }
  }

  &.center .headerMain__items {
    width: 100%;
  }

  .menuIcon {
    margin-right: auto;
  }

  .logo {
    display: block;
    margin-left: 20px;
    margin-right: 20px;

    @include breakpoint($screen-sm-min) {
      margin-left: 0;
      margin-right: 0;
    }
  }

  .logo__img {
    max-width: $logoWidthMobile;
    display: block;

    @include breakpoint($screen-sm-min) {
      max-width: $logoWidthTablet;
    }

    @include breakpoint($screen-lg) {
      max-width: $logoWidthDesktop;
    }
  }

  .cart {
    width: 25px;
    height: 25px;
    fill: $header-main-cart-color;

    @include breakpoint($screen-sm-min) {
      width: 30px;
      height: 30px;
    }
  }
}
.headerBottom {
  overflow: hidden;
  height: 25px;
  width: 100%;
  float: left;
  color: $header-bottom-top-info-color;
  background: $header-bottom-top-info-background;

  & .match-media {
    @include flexbox;
    @include justify-content(space-between);
    height: inherit;
  }

  .breadcrumb {
    height: 25px;
    width: 100%;
    float: left;
  }
}
.myAccount {
  @include flexbox;
  @include align-items(center);
  text-transform: uppercase;

  &:hover,
  &.is-active {
    .myAccount__icon {
      fill: $header-icon-color--active;
    }
  }

  &.myAccount--leftSide {
    flex-direction: row-reverse;
    margin-right: 20px;

    .myAccount__link {
      padding-right: 0;
      padding-left: 10px;
    }

    .myAccount__separator {
      margin-left: 5px;
      margin-right: -5px;
    }
  }
}

.myAccount__link {
  color: $header-link-color;
  padding-right: 10px;
  transition: color .3s ease-in-out;
  cursor: pointer;
  white-space: nowrap;

  &.is-active {
    color: $header-link-color--active;
  }
}

.myAccount__img {
  position: relative;
  float: right;
}

.headerTop .myAccount__img {
  height: $headerTopTabletIcon-height;
  width: $headerTopTabletIcon-height + 2;

  @include breakpoint($screen-lg) {
    height: $headerTopDesktopIcon-height;
    width: $headerTopDesktopIcon-height + 2;
  }
}

.headerMain .myAccount__img {
  height: $headerMainTabletMyAccountIcon-height;
  width: $headerMainTabletMyAccountIcon-height + 2;

  @include breakpoint($screen-lg) {
    height: $headerMainDesktopMyAccountIcon-height;
    width: $headerMainDesktopMyAccountIcon-height + 2;
  }
}

.myAccount__icon {
  transition: fill 0.3s ease-in-out;
  height: 100%;
  width: 100%;
  fill: $header-icon-color;
  overflow: visible;
}

.myAccount__gravatar {
  position: absolute;
  top: 0;
  right: 1px;
  height: 100%;

  img {
    max-width: 100%;
    max-height: 100%;
    border-radius: 100px;
  }
}

.myAccount__gravatar + .myAccount__icon {
  border-radius: 100px;
  overflow: hidden;
}

// Hidden Side - hidden links
.myAccount__hiddenSide {
  display: none;
  overflow: hidden;
  white-space: nowrap;

  @include breakpoint($screen-sm) {
    @if '{{ settings.my_account_link_style_tablet }}' == 'slide' {
      display: block;
    }
    @else {
      display: #{'{{ settings.my_account_link_style_tablet }}'}
    }
  }

  @include breakpoint($screen-md-min) {
    @if '{{ settings.my_account_link_style_desktop }}' == 'slide' {
      display: block;
    }
    @else {
      display: #{'{{ settings.my_account_link_style_desktop }}'}
    }
  }

  &.is-animated {
    transition: all .3s ease-in-out;
  }

  .myAccount__separator,
  .myAccount__link {
    vertical-align: top;
  }

  .myAccount__separator {
    margin-left: -5px;
    margin-right: 5px;
    color: $header-top-separator-color;
  }
}

// Right Side - welcome message + icon
.myAccount__visibleSide {
  overflow: hidden;
  cursor: pointer;

  .myAccount__link {
    float: right;
    white-space: nowrap;
    overflow: hidden;
    text-transform: capitalize;

    &.is-animated {
      transition: all .3s ease-in-out;
    }
  }
}.wishList {
  @include flexbox;
  @include align-items(center);
  text-transform: uppercase;
  cursor: pointer;

  .wishList__link {
    color: $header-link-color;
    padding-right: 10px;
    cursor: pointer;
    float: left;
    white-space: nowrap;
    overflow: hidden;
    text-transform: capitalize;

    &.is-active {
      color: $header-link-color--active;
    }

    &.is-animated {
      transition: all .3s ease-in-out;
    }
  }

  .wishList__icon {
    transition: fill 0.3s ease-in-out;
    height: $headerTopTabletIcon-height;
    width: $headerTopTabletIcon-height + 2;
    fill: $header-icon-color;
    overflow: visible;

    &:last-child {
      display: none;
    }

    @include breakpoint($screen-lg) {
      height: $headerTopDesktopIcon-height;
      width: $headerTopDesktopIcon-height + 2;
    }
  }

  .wishList__counter {
    font-size: 10px;
    line-height: 10px;
    float: right;
    color: $header-link-color;
    margin-left: 2px;
    display: none;
  }

  .wishList__img {
    display: block;
    position: relative;
    height: $headerTopTabletIcon-height;

    @include breakpoint($screen-lg) {
      height: $headerTopDesktopIcon-height;
    }
  }

  .wishList__img.is-active {
    .wishList__icon {
      display: none;

      &:last-child {
        display: block;
      }
    }

    .wishList__counter {
      display: block;
    }
  }

  &:hover,
  &.is-active {
    .wishList__icon {
      fill: $header-icon-color--active;
    }

    .wishList__counter {
      color: $header-link-color--active;
    }
  }
}